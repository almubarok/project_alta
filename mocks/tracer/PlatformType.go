// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	tracer "github.com/golangid/candi/tracer"
	mock "github.com/stretchr/testify/mock"
)

// PlatformType is an autogenerated mock type for the PlatformType type
type PlatformType struct {
	mock.Mock
}

// GetTraceID provides a mock function with given fields: ctx
func (_m *PlatformType) GetTraceID(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTraceURL provides a mock function with given fields: ctx
func (_m *PlatformType) GetTraceURL(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StartRootSpan provides a mock function with given fields: ctx, operationName, header
func (_m *PlatformType) StartRootSpan(ctx context.Context, operationName string, header map[string]string) tracer.Tracer {
	ret := _m.Called(ctx, operationName, header)

	var r0 tracer.Tracer
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) tracer.Tracer); ok {
		r0 = rf(ctx, operationName, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tracer.Tracer)
		}
	}

	return r0
}

// StartSpan provides a mock function with given fields: ctx, opName
func (_m *PlatformType) StartSpan(ctx context.Context, opName string) tracer.Tracer {
	ret := _m.Called(ctx, opName)

	var r0 tracer.Tracer
	if rf, ok := ret.Get(0).(func(context.Context, string) tracer.Tracer); ok {
		r0 = rf(ctx, opName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tracer.Tracer)
		}
	}

	return r0
}

// NewPlatformType creates a new instance of PlatformType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlatformType(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlatformType {
	mock := &PlatformType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
