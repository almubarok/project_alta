// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GraphQLService is an autogenerated mock type for the GraphQLService type
type GraphQLService struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: ctx, document, operationName, variableValues
func (_m *GraphQLService) Subscribe(ctx context.Context, document string, operationName string, variableValues map[string]interface{}) (<-chan interface{}, error) {
	ret := _m.Called(ctx, document, operationName, variableValues)

	var r0 <-chan interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) (<-chan interface{}, error)); ok {
		return rf(ctx, document, operationName, variableValues)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) <-chan interface{}); ok {
		r0 = rf(ctx, document, operationName, variableValues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, document, operationName, variableValues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGraphQLService creates a new instance of GraphQLService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGraphQLService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GraphQLService {
	mock := &GraphQLService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
