// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/golangid/candi/codebase/factory/types"
)

// GRPCMiddleware is an autogenerated mock type for the GRPCMiddleware type
type GRPCMiddleware struct {
	mock.Mock
}

// GRPCBasicAuth provides a mock function with given fields: ctx
func (_m *GRPCMiddleware) GRPCBasicAuth(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCBearerAuth provides a mock function with given fields: ctx
func (_m *GRPCMiddleware) GRPCBearerAuth(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCMultipleAuth provides a mock function with given fields: ctx
func (_m *GRPCMiddleware) GRPCMultipleAuth(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCPermissionACL provides a mock function with given fields: permissionCode
func (_m *GRPCMiddleware) GRPCPermissionACL(permissionCode string) types.MiddlewareFunc {
	ret := _m.Called(permissionCode)

	var r0 types.MiddlewareFunc
	if rf, ok := ret.Get(0).(func(string) types.MiddlewareFunc); ok {
		r0 = rf(permissionCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.MiddlewareFunc)
		}
	}

	return r0
}

// NewGRPCMiddleware creates a new instance of GRPCMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGRPCMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *GRPCMiddleware {
	mock := &GRPCMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
